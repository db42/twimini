DB tables
1. User
id, email, password, name

2. post
id, user_id, post, time-stamp

3. Follow_list
id, user_id following, user_id follower

		db.update("CREATE TABLE user (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"name varchar(128) DEFAULT '' NOT NULL," +
            "email varchar(128) NOT NULL," +
            "password varchar(40) NOT NULL" +
            ")");
			
		db.update("CREATE TABLE post (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT," +
            "post varchar(140) NOT NULL," +
            "time TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL" +
            ")");

		db.update("CREATE TABLE followers (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"FOREIGN KEY (user) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT," +
            "FOREIGN KEY (follower) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT" +
            ")");		




Pages:
1. Login - Register : /
2. Profile -> show user posts :/id
3. Followers -> show followers list :/followers
4. Followings -> show following users list :/following
5. Home -> show subscribed user's posts :/
6. Logout

TODO:
1. explore #!
2. exlore authentication - login and register
3. start building controller functions for pages

4. login -register  -- done
5. Basic jsp pages for 2-5 including forms
6. controller for 3,4 - done, 5 -done

23, July
7. start css, html
8. explore and start rest api + independent application using javascript
9. logout
10. return status from store

3 August:
1. Follow/unfollow button
2. Polling block
2. JS tweet time
3. form validation for email id etc.
5. user profile backend : save
4. Fill tables with actual data
5. self name in followers/following -  follow self: at the time of register
6. Photograph
7. Retweet
8. Optimizations
    - caching, backend db structure and all that


Other work:
1. CSS/HTML designing
2. Javascript
3. JSON/ REST api


