DB tables
1. User
id, email, password, name

2. post
id, user_id, post, time-stamp

3. Follow_list
id, user_id following, user_id follower

		db.update("CREATE TABLE user (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"name varchar(128) DEFAULT '' NOT NULL," +
            "email varchar(128) NOT NULL," +
            "password varchar(40) NOT NULL" +
            ")");
			
		db.update("CREATE TABLE post (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT," +
            "post varchar(140) NOT NULL," +
            "time TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL" +
            ")");

		db.update("CREATE TABLE followers (" +
            "id INTEGER AUTO_INCREMENT PRIMARY KEY," +
			"FOREIGN KEY (user) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT," +
            "FOREIGN KEY (follower) REFERENCES user(id) ON DELETE RESTRICT ON UPDATE RESTRICT" +
            ")");		




Pages:
1. Login - Register : /
2. Profile -> show user posts :/id
3. Followers -> show followers list :/followers
4. Followings -> show following users list :/following
5. Home -> show subscribed user's posts :/
6. Logout

TODO:
1. explore #!
2. exlore authentication - login and register
3. start building controller functions for pages

4. login -register  -- done
5. Basic jsp pages for 2-5 including forms
6. controller for 3,4 - done, 5 -done

23, July
7. start css, html
8. explore and start rest api + independent application using javascript
9. logout
10. return status from store

3 August:
1. Follow/unfollow button
3. user profile backend : save
3. hidden element for feed notes
2. JS tweet time
2. Polling block, do not add tweet with js

6 August
1. button in followers list - DONE
2. user profile validation JS - TODO
3. Fill tables with actual data
4. Photograph - DONE

10. load older tweets when going down DONE
8. profile image
5. Retweet - frontend -DONE
- authorization token
- add fields in user table and update queries correspondingly
- proper usage of auth interceptor, threadlocal userID
- major refactoring
- donot show retweet on already retweeted tweets
- overall user experience
- better: use localstorage instead of sessionstorage
- validation - using tab
- search, user info block
- alt image
- validation - login

NEW TODO s
- Optimizations
    - caching, backend db structure and all that
- code refactoring
    - java, js - currently doing it
- java, javascript - docs, tests
- handle xss using javascript
- solve shift tab issue

- transactions
- code refactoring
    - css, jsp
- slow append
- ssl


- store.java line 316: is the method required?
- line 83: follow_button.js
- line 72: follow_button.js
- update followers and followings when click
- checking server side: tweet + parameters

Client UI
- no session
- static content - cacheable
- html + api - js
- no cookie

REST API
- rest urls
- exception handling


DB
- db indexing
- db validation before queries
- caching header

other notes:
- shouldn't use setters
- indexing based on primary keys - btrees
- config in separate properties file
- variable names - camel case

- refactoring - Store queries
- md5
- indexing
- js - profile/username
- get rid of interceptor



Other work:
1. CSS/HTML designing
2. Javascript
3. JSON/ REST api

DB queries:
1. alter table posts ADD COLUMN rtwt_id INTEGER;
2. alter table posts ADD COLUMN author_id INTEGER;
3. alter table posts add constraint uc_rtwt_id UNIQUE(user_id, rtwt_id);
4. alter table users add COLUMN auth_key varchar(40);

alter table users add column num_tweets int(10) default 0;
alter table users add column num_followers int(10) default 0;
alter table users add column num_followings int(10) default 0;
alter table users add column image_url varchar(255);

http://www.quora.com/How-does-Facebooks-News-Feed-work
